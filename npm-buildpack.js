#!/usr/bin/env node

var request = require('request')
var flat = require('flat-file-db')
var mkdirp = require('mkdirp')
var path = require('path')
var proc = require('child_process')
var split = require('split')
var parse = require('through-json')
var rimraf = require('rimraf')
var fs = require('fs')
var os = require('os')
var cpr = require('cpr')
var minimist = require('minimist')

var argv = minimist(process.argv)

if (argv.help || argv.h) {
  console.error('Usage: npm-buildpack [options]')
  console.error('')
  console.error('  --cache, -c   to set the cache dir. defaults to /tmp/npm-buildpack')
  console.error('  --no-cache    reset the cache when installing')
  console.error('  --name, -n    set the cache index name. defaults to package.name')
  console.error()
  process.exit(0)
}

try {
  var pkg = require(fs.realpathSync(argv.package || argv.p || path.join(process.cwd(), 'package.json')))
} catch (err) {
  console.error('package.json could not be opened/parsed')
  process.exit(1)
}

if (fs.existsSync('node_modules')) {
  proc.spawn('npm', ['rebuild'], {stdio:'inherit'}).on('exit', function(code) {
    process.exit(code)
  })
  return
}

if (argv.c) argv.cache = argc.c
if (argv.cache === true) argv.cache = null

var cache = argv.cache || process.env.NPM_BUILDPACK_CACHE || path.join(fs.existsSync('/tmp') ? '/tmp' : os.tmpDir(), 'npm-buildpack')
var deps = Object.keys(pkg.dependencies || {}).concat(pkg.devDependencies || {})
var tmp = path.join(cache, argv.name || argv.n || pkg.name || '_global')

if (argv.cache === false) rimraf.sync(tmp)

mkdirp.sync(tmp)
mkdirp.sync(path.join(tmp, 'node_modules'))
fs.writeFileSync(path.join(tmp, 'README.md'), 'auto-generated by npm-buildpack')

var db = flat.sync(path.join(tmp, '.npm-buildpack.db'))
var updated = db.get('updated') || [new Date(Date.now() - 3600000).toISOString()]

var readdir = function(p) {
  try {
    return fs.readdirSync(p)
  } catch (err) {
    return []
  }
}

var gen = function(index, mods) {
  readdir(mods).forEach(function(mod) {
    if (!index[mod]) index[mod] = []
    index[mod].push(path.join(mods, mod))
    gen(index, path.join(mods, mod, 'node_modules'))
  })
  return index
}

var index = gen({}, path.join(tmp, 'node_modules'))

var rm = function(name) {
  if (!index.hasOwnProperty(name)) return
  index[name].forEach(function(p) {
    rimraf.sync(p)
  })
}

var prune = function() {
  readdir(path.join(tmp, 'node_modules')).forEach(function(name) {
    if (deps.indexOf(name) === -1 && name[0] !== '.') rm(name)
  })
}

var install = function(err) {
  if (err) throw err
  fs.writeFileSync(path.join(tmp, 'package.json'), JSON.stringify(pkg, null, 2))

  proc.spawn('npm', ['install'], {stdio:'inherit', cwd:tmp}).on('exit', function(code) {
    if (code) return process.exit(code)
    cpr(path.join(tmp, 'node_modules'), path.join(process.cwd(), 'node_modules'), {deleteFirst:true}, function(err) {
      if (err) throw err
      process.exit(0)
    })
  })
}

prune()

var latest = updated
request('http://registry.npmjs.org/-/_view/browseUpdated?group_level=2&startkey='+JSON.stringify(updated))
  .pipe(split(function(line) {
    if (line.indexOf('{"key":') === 0) return line.replace(/,$/, '')
  }))
  .pipe(parse(function(data) {
    var key = data.key
    if (key[0] === updated[0] && key[1] === updated[1]) return
    latest = key
    rm(key[1])
  }))
  .on('finish', function() {
    db.put('updated', latest, install)
  })